
public trait AtomicRepresentable {

  type AtomicRepresentation;

  static fun encodeAtomicRepresentation(_ value: sink Self) -> AtomicRepresentation

  fun decodeAtomicRepresentation(_ storage: sink AtomicRepresentation) -> Self

}

public conformance Bool: AtomicRepresentable {
  public typealias AtomicRepresentation = BoolAtomicRepresentation

  public static fun encodeAtomicRepresentation(_ value: sink Self) -> BoolAtomicRepresentation {
    .new(value: value.copy())
  }

  public fun decodeAtomicRepresentation(_ storage: sink BoolAtomicRepresentation) -> Self {
    storage.value
  }
}

public conformance Int: AtomicRepresentable {
  public typealias AtomicRepresentation = IntAtomicRepresentation

  public static fun encodeAtomicRepresentation(_ value: sink Self) -> IntAtomicRepresentation {
    .new(value: value.copy())
  }

  public fun decodeAtomicRepresentation(_ storage: sink IntAtomicRepresentation) -> Self {
    storage.value
  }
}

public conformance Int8: AtomicRepresentable {
  public typealias AtomicRepresentation = Int8AtomicRepresentation

  public static fun encodeAtomicRepresentation(_ value: sink Self) -> Int8AtomicRepresentation {
    .new(value: value.copy())
  }

  public fun decodeAtomicRepresentation(_ storage: sink Int8AtomicRepresentation) -> Self {
    storage.value
  }
}

public conformance Int32: AtomicRepresentable {
  public typealias AtomicRepresentation = Int32AtomicRepresentation

  public static fun encodeAtomicRepresentation(_ value: sink Self) -> Int32AtomicRepresentation {
    .new(value: value.copy())
  }

  public fun decodeAtomicRepresentation(_ storage: sink Int32AtomicRepresentation) -> Self {
    storage.value
  }
}

public conformance Int64: AtomicRepresentable {
  public typealias AtomicRepresentation = Int64AtomicRepresentation

  public static fun encodeAtomicRepresentation(_ value: sink Self) -> Int64AtomicRepresentation {
    .new(value: value.copy())
  }

  public fun decodeAtomicRepresentation(_ storage: sink Int64AtomicRepresentation) -> Self {
    storage.value
  }
}

public conformance UInt: AtomicRepresentable {
  public typealias AtomicRepresentation = UIntAtomicRepresentation

  public static fun encodeAtomicRepresentation(_ value: sink Self) -> UIntAtomicRepresentation {
    .new(value: value.copy())
  }

  public fun decodeAtomicRepresentation(_ storage: sink UIntAtomicRepresentation) -> Self {
    storage.value
  }
}

public conformance UInt8: AtomicRepresentable {
  public typealias AtomicRepresentation = UInt8AtomicRepresentation

  public static fun encodeAtomicRepresentation(_ value: sink Self) -> UInt8AtomicRepresentation {
    .new(value: value.copy())
  }

  public fun decodeAtomicRepresentation(_ storage: sink UInt8AtomicRepresentation) -> Self {
    storage.value
  }
}

public conformance UInt32: AtomicRepresentable {
  public typealias AtomicRepresentation = UInt32AtomicRepresentation

  public static fun encodeAtomicRepresentation(_ value: sink Self) -> UInt32AtomicRepresentation {
    .new(value: value.copy())
  }

  public fun decodeAtomicRepresentation(_ storage: sink UInt32AtomicRepresentation) -> Self {
    storage.value
  }
}

public conformance UInt64: AtomicRepresentable {
  public typealias AtomicRepresentation = UInt64AtomicRepresentation

  public static fun encodeAtomicRepresentation(_ value: sink Self) -> UInt64AtomicRepresentation {
    .new(value: value.copy())
  }

  public fun decodeAtomicRepresentation(_ storage: sink UInt64AtomicRepresentation) -> Self {
    storage.value
  }
}
