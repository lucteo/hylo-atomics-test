
trait PlatformAtomic {

  type Value

  fun load(ordering: AtomicLoadOrdering) -> Value
  fun store(_ value: Value, ordering: AtomicStoreOrdering) inout
  fun exchange(desired: Value, ordering: AtomicUpdateOrdering) inout -> Value
  fun compare_and_exchange(expected: Value, desired: Value, ordering: AtomicUpdateOrdering) inout -> Bool
  fun compare_and_exchange(expected: Value, desired: Value, success_ordering: AtomicUpdateOrdering, failure_ordering: AtomicLoadOrdering) inout -> Bool
  fun weak_compare_and_exchange(expected: Value, desired: Value, ordering: AtomicUpdateOrdering) inout -> Bool
  fun weak_compare_and_exchange(expected: Value, desired: Value, success_ordering: AtomicUpdateOrdering, failure_ordering: AtomicLoadOrdering) inout -> Bool

}

trait IntegerPlatformAtomic {

  type Value

  fun fetch_add(_ value: Value, ordering: AtomicUpdateOrdering) inout -> Value
  fun fetch_sub(_ value: Value, ordering: AtomicUpdateOrdering) inout -> Value
  fun fetch_and(_ value: Value, ordering: AtomicUpdateOrdering) inout -> Value
  fun fetch_nand(_ value: Value, ordering: AtomicUpdateOrdering) inout -> Value
  fun fetch_or(_ value: Value, ordering: AtomicUpdateOrdering) inout -> Value
  fun fetch_xor(_ value: Value, ordering: AtomicUpdateOrdering) inout -> Value
  fun fetch_max(_ value: Value, ordering: AtomicUpdateOrdering) inout -> Value
  fun fetch_min(_ value: Value, ordering: AtomicUpdateOrdering) inout -> Value

}

///////////////////////////////////////////////////////////////////////////////
// MARK: BoolAtomicRepresentation

type BoolAtomicRepresentation {
  let value: Bool

  public typealias Value = Bool

  public fun load(ordering: AtomicLoadOrdering) -> Bool {
    return value.copy()
  }

  public fun store(_ value: Bool, ordering: AtomicStoreOrdering) inout {
    &self.value = value.copy()
  }

  public fun exchange(desired: Bool, ordering: AtomicUpdateOrdering) inout -> Bool {
    inout other = desired.copy()
    &value.exchange(with: &other)
    return other
  }

  public fun compare_and_exchange(expected: Bool, desired: Bool, ordering: AtomicUpdateOrdering) inout -> Bool {
    if value == expected {
      &value = desired.copy()
      return true
    }
    return false
  }

  public fun compare_and_exchange(expected: Bool, desired: Bool, success_ordering: AtomicUpdateOrdering, failure_ordering: AtomicLoadOrdering) inout -> Bool {
    return compare_and_exchange(expected: expected, desired: desired, ordering: success_ordering)
  }

  public fun weak_compare_and_exchange(expected: Bool, desired: Bool, ordering: AtomicUpdateOrdering) inout -> Bool {
    return compare_and_exchange(expected: expected, desired: desired, ordering: ordering)
  }

  public fun weak_compare_and_exchange(expected: Bool, desired: Bool, success_ordering: AtomicUpdateOrdering, failure_ordering: AtomicLoadOrdering) inout -> Bool {
    return compare_and_exchange(expected: expected, desired: desired, ordering: success_ordering)
  }

  public fun fetch_and(_ value: Bool, ordering: AtomicUpdateOrdering) inout -> Bool {
    return exchange(desired: self.value && value, ordering: ordering)
  }
  public fun fetch_nand(_ value: Bool, ordering: AtomicUpdateOrdering) inout -> Bool {
    return exchange(desired: !(self.value && value), ordering: ordering)
  }
  public fun fetch_or(_ value: Bool, ordering: AtomicUpdateOrdering) inout -> Bool {
    return exchange(desired: self.value || value, ordering: ordering)
  }
  public fun fetch_xor(_ value: Bool, ordering: AtomicUpdateOrdering) inout -> Bool {
    return exchange(desired: (self.value && !value) || (!self.value && value), ordering: ordering)
  }
  public fun fetch_not(ordering: AtomicUpdateOrdering) inout -> Bool {
    return exchange(desired: !self.value, ordering: ordering)
  }

}


///////////////////////////////////////////////////////////////////////////////
// MARK: integer types

type IntAtomicRepresentation {
  let value: Int

  public typealias Value = Int

  public fun load(ordering: AtomicLoadOrdering) -> Int {
    return value.copy()
  }

  public fun store(_ value: Int, ordering: AtomicStoreOrdering) inout {
    &self.value = value.copy()
  }

  public fun exchange(desired: Int, ordering: AtomicUpdateOrdering) inout -> Int {
    inout other = desired.copy()
    &value.exchange(with: &other)
    return other
  }

  public fun compare_and_exchange(expected: Int, desired: Int, ordering: AtomicUpdateOrdering) inout -> Bool {
    if value == expected {
      &value = desired.copy()
      return true
    }
    return false
  }

  public fun compare_and_exchange(expected: Int, desired: Int, success_ordering: AtomicUpdateOrdering, failure_ordering: AtomicLoadOrdering) inout -> Bool {
    return compare_and_exchange(expected: expected, desired: desired, ordering: success_ordering)
  }

  public fun weak_compare_and_exchange(expected: Int, desired: Int, ordering: AtomicUpdateOrdering) inout -> Bool {
    return compare_and_exchange(expected: expected, desired: desired, ordering: ordering)
  }

  public fun weak_compare_and_exchange(expected: Int, desired: Int, success_ordering: AtomicUpdateOrdering, failure_ordering: AtomicLoadOrdering) inout -> Bool {
    return compare_and_exchange(expected: expected, desired: desired, ordering: success_ordering)
  }

  public fun fetch_add(_ value: Int, ordering: AtomicUpdateOrdering) inout -> Int {
    return exchange(desired: self.value + value, ordering: ordering)
  }
  public fun fetch_sub(_ value: Int, ordering: AtomicUpdateOrdering) inout -> Int {
    return exchange(desired: self.value - value, ordering: ordering)
  }
  public fun fetch_and(_ value: Int, ordering: AtomicUpdateOrdering) inout -> Int {
    return exchange(desired: self.value & value, ordering: ordering)
  }
  public fun fetch_nand(_ value: Int, ordering: AtomicUpdateOrdering) inout -> Int {
    return exchange(desired: ~(self.value & value), ordering: ordering)
  }
  public fun fetch_or(_ value: Int, ordering: AtomicUpdateOrdering) inout -> Int {
    return exchange(desired: self.value | value, ordering: ordering)
  }
  public fun fetch_xor(_ value: Int, ordering: AtomicUpdateOrdering) inout -> Int {
    return exchange(desired: self.value ^ value, ordering: ordering)
  }
  public fun fetch_max(_ value: Int, ordering: AtomicUpdateOrdering) inout -> Int {
    if self.value < value {
      return exchange(desired: value, ordering: ordering)
    }
    return self.value.copy()
  }
  public fun fetch_min(_ value: Int, ordering: AtomicUpdateOrdering) inout -> Int {
    if value < self.value {
      return exchange(desired: value, ordering: ordering)
    }
    return self.value.copy()
  }

}

type Int8AtomicRepresentation {

  let value: Int8

  public typealias Value = Int8

  public fun load(ordering: AtomicLoadOrdering) -> Int8 {
    return value.copy()
  }

  public fun store(_ value: Int8, ordering: AtomicStoreOrdering) inout {
    &self.value = value.copy()
  }

  public fun exchange(desired: Int8, ordering: AtomicUpdateOrdering) inout -> Int8 {
    inout other = desired.copy()
    &value.exchange(with: &other)
    return other
  }

  public fun compare_and_exchange(expected: Int8, desired: Int8, ordering: AtomicUpdateOrdering) inout -> Bool {
    if value == expected {
      &value = desired.copy()
      return true
    }
    return false
  }

  public fun compare_and_exchange(expected: Int8, desired: Int8, success_ordering: AtomicUpdateOrdering, failure_ordering: AtomicLoadOrdering) inout -> Bool {
    return compare_and_exchange(expected: expected, desired: desired, ordering: success_ordering)
  }

  public fun weak_compare_and_exchange(expected: Int8, desired: Int8, ordering: AtomicUpdateOrdering) inout -> Bool {
    return compare_and_exchange(expected: expected, desired: desired, ordering: ordering)
  }

  public fun weak_compare_and_exchange(expected: Int8, desired: Int8, success_ordering: AtomicUpdateOrdering, failure_ordering: AtomicLoadOrdering) inout -> Bool {
    return compare_and_exchange(expected: expected, desired: desired, ordering: success_ordering)
  }

  public fun fetch_add(_ value: Int8, ordering: AtomicUpdateOrdering) inout -> Int8 {
    return exchange(desired: self.value + value, ordering: ordering)
  }
  public fun fetch_sub(_ value: Int8, ordering: AtomicUpdateOrdering) inout -> Int8 {
    return exchange(desired: self.value - value, ordering: ordering)
  }
  public fun fetch_and(_ value: Int8, ordering: AtomicUpdateOrdering) inout -> Int8 {
    return exchange(desired: self.value & value, ordering: ordering)
  }
  public fun fetch_nand(_ value: Int8, ordering: AtomicUpdateOrdering) inout -> Int8 {
    return exchange(desired: ~(self.value & value), ordering: ordering)
  }
  public fun fetch_or(_ value: Int8, ordering: AtomicUpdateOrdering) inout -> Int8 {
    return exchange(desired: self.value | value, ordering: ordering)
  }
  public fun fetch_xor(_ value: Int8, ordering: AtomicUpdateOrdering) inout -> Int8 {
    return exchange(desired: self.value ^ value, ordering: ordering)
  }
  public fun fetch_max(_ value: Int8, ordering: AtomicUpdateOrdering) inout -> Int8 {
    if self.value < value {
      return exchange(desired: value, ordering: ordering)
    }
    return self.value.copy()
  }
  public fun fetch_min(_ value: Int8, ordering: AtomicUpdateOrdering) inout -> Int8 {
    if value < self.value {
      return exchange(desired: value, ordering: ordering)
    }
    return self.value.copy()
  }

}

type Int32AtomicRepresentation {

  let value: Int32

  public typealias Value = Int32

  public fun load(ordering: AtomicLoadOrdering) -> Int32 {
    return value.copy()
  }

  public fun store(_ value: Int32, ordering: AtomicStoreOrdering) inout {
    &self.value = value.copy()
  }

  public fun exchange(desired: Int32, ordering: AtomicUpdateOrdering) inout -> Int32 {
    inout other = desired.copy()
    &value.exchange(with: &other)
    return other
  }

  public fun compare_and_exchange(expected: Int32, desired: Int32, ordering: AtomicUpdateOrdering) inout -> Bool {
    if value == expected {
      &value = desired.copy()
      return true
    }
    return false
  }

  public fun compare_and_exchange(expected: Int32, desired: Int32, success_ordering: AtomicUpdateOrdering, failure_ordering: AtomicLoadOrdering) inout -> Bool {
    return compare_and_exchange(expected: expected, desired: desired, ordering: success_ordering)
  }

  public fun weak_compare_and_exchange(expected: Int32, desired: Int32, ordering: AtomicUpdateOrdering) inout -> Bool {
    return compare_and_exchange(expected: expected, desired: desired, ordering: ordering)
  }

  public fun weak_compare_and_exchange(expected: Int32, desired: Int32, success_ordering: AtomicUpdateOrdering, failure_ordering: AtomicLoadOrdering) inout -> Bool {
    return compare_and_exchange(expected: expected, desired: desired, ordering: success_ordering)
  }

  public fun fetch_add(_ value: Int32, ordering: AtomicUpdateOrdering) inout -> Int32 {
    return exchange(desired: self.value + value, ordering: ordering)
  }
  public fun fetch_sub(_ value: Int32, ordering: AtomicUpdateOrdering) inout -> Int32 {
    return exchange(desired: self.value - value, ordering: ordering)
  }
  public fun fetch_and(_ value: Int32, ordering: AtomicUpdateOrdering) inout -> Int32 {
    return exchange(desired: self.value & value, ordering: ordering)
  }
  public fun fetch_nand(_ value: Int32, ordering: AtomicUpdateOrdering) inout -> Int32 {
    return exchange(desired: ~(self.value & value), ordering: ordering)
  }
  public fun fetch_or(_ value: Int32, ordering: AtomicUpdateOrdering) inout -> Int32 {
    return exchange(desired: self.value | value, ordering: ordering)
  }
  public fun fetch_xor(_ value: Int32, ordering: AtomicUpdateOrdering) inout -> Int32 {
    return exchange(desired: self.value ^ value, ordering: ordering)
  }
  public fun fetch_max(_ value: Int32, ordering: AtomicUpdateOrdering) inout -> Int32 {
    if self.value < value {
      return exchange(desired: value, ordering: ordering)
    }
    return self.value.copy()
  }
  public fun fetch_min(_ value: Int32, ordering: AtomicUpdateOrdering) inout -> Int32 {
    if value < self.value {
      return exchange(desired: value, ordering: ordering)
    }
    return self.value.copy()
  }

}

type Int64AtomicRepresentation {

  let value: Int64

  public typealias Value = Int64

  public fun load(ordering: AtomicLoadOrdering) -> Int64 {
    return value.copy()
  }

  public fun store(_ value: Int64, ordering: AtomicStoreOrdering) inout {
    &self.value = value.copy()
  }

  public fun exchange(desired: Int64, ordering: AtomicUpdateOrdering) inout -> Int64 {
    inout other = desired.copy()
    &value.exchange(with: &other)
    return other
  }

  public fun compare_and_exchange(expected: Int64, desired: Int64, ordering: AtomicUpdateOrdering) inout -> Bool {
    if value == expected {
      &value = desired.copy()
      return true
    }
    return false
  }

  public fun compare_and_exchange(expected: Int64, desired: Int64, success_ordering: AtomicUpdateOrdering, failure_ordering: AtomicLoadOrdering) inout -> Bool {
    return compare_and_exchange(expected: expected, desired: desired, ordering: success_ordering)
  }

  public fun weak_compare_and_exchange(expected: Int64, desired: Int64, ordering: AtomicUpdateOrdering) inout -> Bool {
    return compare_and_exchange(expected: expected, desired: desired, ordering: ordering)
  }

  public fun weak_compare_and_exchange(expected: Int64, desired: Int64, success_ordering: AtomicUpdateOrdering, failure_ordering: AtomicLoadOrdering) inout -> Bool {
    return compare_and_exchange(expected: expected, desired: desired, ordering: success_ordering)
  }

  public fun fetch_add(_ value: Int64, ordering: AtomicUpdateOrdering) inout -> Int64 {
    return exchange(desired: self.value + value, ordering: ordering)
  }
  public fun fetch_sub(_ value: Int64, ordering: AtomicUpdateOrdering) inout -> Int64 {
    return exchange(desired: self.value - value, ordering: ordering)
  }
  public fun fetch_and(_ value: Int64, ordering: AtomicUpdateOrdering) inout -> Int64 {
    return exchange(desired: self.value & value, ordering: ordering)
  }
  public fun fetch_nand(_ value: Int64, ordering: AtomicUpdateOrdering) inout -> Int64 {
    return exchange(desired: ~(self.value & value), ordering: ordering)
  }
  public fun fetch_or(_ value: Int64, ordering: AtomicUpdateOrdering) inout -> Int64 {
    return exchange(desired: self.value | value, ordering: ordering)
  }
  public fun fetch_xor(_ value: Int64, ordering: AtomicUpdateOrdering) inout -> Int64 {
    return exchange(desired: self.value ^ value, ordering: ordering)
  }
  public fun fetch_max(_ value: Int64, ordering: AtomicUpdateOrdering) inout -> Int64 {
    if self.value < value {
      return exchange(desired: value, ordering: ordering)
    }
    return self.value.copy()
  }
  public fun fetch_min(_ value: Int64, ordering: AtomicUpdateOrdering) inout -> Int64 {
    if value < self.value {
      return exchange(desired: value, ordering: ordering)
    }
    return self.value.copy()
  }

}

type UIntAtomicRepresentation {
  let value: UInt

  public typealias Value = UInt

  public fun load(ordering: AtomicLoadOrdering) -> UInt {
    return value.copy()
  }

  public fun store(_ value: UInt, ordering: AtomicStoreOrdering) inout {
    &self.value = value.copy()
  }

  public fun exchange(desired: UInt, ordering: AtomicUpdateOrdering) inout -> UInt {
    inout other = desired.copy()
    &value.exchange(with: &other)
    return other
  }

  public fun compare_and_exchange(expected: UInt, desired: UInt, ordering: AtomicUpdateOrdering) inout -> Bool {
    if value == expected {
      &value = desired.copy()
      return true
    }
    return false
  }

  public fun compare_and_exchange(expected: UInt, desired: UInt, success_ordering: AtomicUpdateOrdering, failure_ordering: AtomicLoadOrdering) inout -> Bool {
    return compare_and_exchange(expected: expected, desired: desired, ordering: success_ordering)
  }

  public fun weak_compare_and_exchange(expected: UInt, desired: UInt, ordering: AtomicUpdateOrdering) inout -> Bool {
    return compare_and_exchange(expected: expected, desired: desired, ordering: ordering)
  }

  public fun weak_compare_and_exchange(expected: UInt, desired: UInt, success_ordering: AtomicUpdateOrdering, failure_ordering: AtomicLoadOrdering) inout -> Bool {
    return compare_and_exchange(expected: expected, desired: desired, ordering: success_ordering)
  }

  public fun fetch_add(_ value: UInt, ordering: AtomicUpdateOrdering) inout -> UInt {
    return exchange(desired: self.value + value, ordering: ordering)
  }
  public fun fetch_sub(_ value: UInt, ordering: AtomicUpdateOrdering) inout -> UInt {
    return exchange(desired: self.value - value, ordering: ordering)
  }
  public fun fetch_and(_ value: UInt, ordering: AtomicUpdateOrdering) inout -> UInt {
    return exchange(desired: self.value & value, ordering: ordering)
  }
  public fun fetch_nand(_ value: UInt, ordering: AtomicUpdateOrdering) inout -> UInt {
    return exchange(desired: ~(self.value & value), ordering: ordering)
  }
  public fun fetch_or(_ value: UInt, ordering: AtomicUpdateOrdering) inout -> UInt {
    return exchange(desired: self.value | value, ordering: ordering)
  }
  public fun fetch_xor(_ value: UInt, ordering: AtomicUpdateOrdering) inout -> UInt {
    return exchange(desired: self.value ^ value, ordering: ordering)
  }
  public fun fetch_max(_ value: UInt, ordering: AtomicUpdateOrdering) inout -> UInt {
    if self.value < value {
      return exchange(desired: value, ordering: ordering)
    }
    return self.value.copy()
  }
  public fun fetch_min(_ value: UInt, ordering: AtomicUpdateOrdering) inout -> UInt {
    if value < self.value {
      return exchange(desired: value, ordering: ordering)
    }
    return self.value.copy()
  }

}

type UInt8AtomicRepresentation {

  let value: UInt8

  public typealias Value = UInt8

  public fun load(ordering: AtomicLoadOrdering) -> UInt8 {
    return value.copy()
  }

  public fun store(_ value: UInt8, ordering: AtomicStoreOrdering) inout {
    &self.value = value.copy()
  }

  public fun exchange(desired: UInt8, ordering: AtomicUpdateOrdering) inout -> UInt8 {
    inout other = desired.copy()
    &value.exchange(with: &other)
    return other
  }

  public fun compare_and_exchange(expected: UInt8, desired: UInt8, ordering: AtomicUpdateOrdering) inout -> Bool {
    if value == expected {
      &value = desired.copy()
      return true
    }
    return false
  }

  public fun compare_and_exchange(expected: UInt8, desired: UInt8, success_ordering: AtomicUpdateOrdering, failure_ordering: AtomicLoadOrdering) inout -> Bool {
    return compare_and_exchange(expected: expected, desired: desired, ordering: success_ordering)
  }

  public fun weak_compare_and_exchange(expected: UInt8, desired: UInt8, ordering: AtomicUpdateOrdering) inout -> Bool {
    return compare_and_exchange(expected: expected, desired: desired, ordering: ordering)
  }

  public fun weak_compare_and_exchange(expected: UInt8, desired: UInt8, success_ordering: AtomicUpdateOrdering, failure_ordering: AtomicLoadOrdering) inout -> Bool {
    return compare_and_exchange(expected: expected, desired: desired, ordering: success_ordering)
  }

  public fun fetch_add(_ value: UInt8, ordering: AtomicUpdateOrdering) inout -> UInt8 {
    return exchange(desired: self.value + value, ordering: ordering)
  }
  public fun fetch_sub(_ value: UInt8, ordering: AtomicUpdateOrdering) inout -> UInt8 {
    return exchange(desired: self.value - value, ordering: ordering)
  }
  public fun fetch_and(_ value: UInt8, ordering: AtomicUpdateOrdering) inout -> UInt8 {
    return exchange(desired: self.value & value, ordering: ordering)
  }
  public fun fetch_nand(_ value: UInt8, ordering: AtomicUpdateOrdering) inout -> UInt8 {
    return exchange(desired: ~(self.value & value), ordering: ordering)
  }
  public fun fetch_or(_ value: UInt8, ordering: AtomicUpdateOrdering) inout -> UInt8 {
    return exchange(desired: self.value | value, ordering: ordering)
  }
  public fun fetch_xor(_ value: UInt8, ordering: AtomicUpdateOrdering) inout -> UInt8 {
    return exchange(desired: self.value ^ value, ordering: ordering)
  }
  public fun fetch_max(_ value: UInt8, ordering: AtomicUpdateOrdering) inout -> UInt8 {
    if self.value < value {
      return exchange(desired: value, ordering: ordering)
    }
    return self.value.copy()
  }
  public fun fetch_min(_ value: UInt8, ordering: AtomicUpdateOrdering) inout -> UInt8 {
    if value < self.value {
      return exchange(desired: value, ordering: ordering)
    }
    return self.value.copy()
  }

}

type UInt32AtomicRepresentation {

  let value: UInt32

  public typealias Value = UInt32

  public fun load(ordering: AtomicLoadOrdering) -> UInt32 {
    return value.copy()
  }

  public fun store(_ value: UInt32, ordering: AtomicStoreOrdering) inout {
    &self.value = value.copy()
  }

  public fun exchange(desired: UInt32, ordering: AtomicUpdateOrdering) inout -> UInt32 {
    inout other = desired.copy()
    &value.exchange(with: &other)
    return other
  }

  public fun compare_and_exchange(expected: UInt32, desired: UInt32, ordering: AtomicUpdateOrdering) inout -> Bool {
    if value == expected {
      &value = desired.copy()
      return true
    }
    return false
  }

  public fun compare_and_exchange(expected: UInt32, desired: UInt32, success_ordering: AtomicUpdateOrdering, failure_ordering: AtomicLoadOrdering) inout -> Bool {
    return compare_and_exchange(expected: expected, desired: desired, ordering: success_ordering)
  }

  public fun weak_compare_and_exchange(expected: UInt32, desired: UInt32, ordering: AtomicUpdateOrdering) inout -> Bool {
    return compare_and_exchange(expected: expected, desired: desired, ordering: ordering)
  }

  public fun weak_compare_and_exchange(expected: UInt32, desired: UInt32, success_ordering: AtomicUpdateOrdering, failure_ordering: AtomicLoadOrdering) inout -> Bool {
    return compare_and_exchange(expected: expected, desired: desired, ordering: success_ordering)
  }

  public fun fetch_add(_ value: UInt32, ordering: AtomicUpdateOrdering) inout -> UInt32 {
    return exchange(desired: self.value + value, ordering: ordering)
  }
  public fun fetch_sub(_ value: UInt32, ordering: AtomicUpdateOrdering) inout -> UInt32 {
    return exchange(desired: self.value - value, ordering: ordering)
  }
  public fun fetch_and(_ value: UInt32, ordering: AtomicUpdateOrdering) inout -> UInt32 {
    return exchange(desired: self.value & value, ordering: ordering)
  }
  public fun fetch_nand(_ value: UInt32, ordering: AtomicUpdateOrdering) inout -> UInt32 {
    return exchange(desired: ~(self.value & value), ordering: ordering)
  }
  public fun fetch_or(_ value: UInt32, ordering: AtomicUpdateOrdering) inout -> UInt32 {
    return exchange(desired: self.value | value, ordering: ordering)
  }
  public fun fetch_xor(_ value: UInt32, ordering: AtomicUpdateOrdering) inout -> UInt32 {
    return exchange(desired: self.value ^ value, ordering: ordering)
  }
  public fun fetch_max(_ value: UInt32, ordering: AtomicUpdateOrdering) inout -> UInt32 {
    if self.value < value {
      return exchange(desired: value, ordering: ordering)
    }
    return self.value.copy()
  }
  public fun fetch_min(_ value: UInt32, ordering: AtomicUpdateOrdering) inout -> UInt32 {
    if value < self.value {
      return exchange(desired: value, ordering: ordering)
    }
    return self.value.copy()
  }

}

type UInt64AtomicRepresentation {

  let value: UInt64

  public typealias Value = UInt64

  public fun load(ordering: AtomicLoadOrdering) -> UInt64 {
    return value.copy()
  }

  public fun store(_ value: UInt64, ordering: AtomicStoreOrdering) inout {
    &self.value = value.copy()
  }

  public fun exchange(desired: UInt64, ordering: AtomicUpdateOrdering) inout -> UInt64 {
    inout other = desired.copy()
    &value.exchange(with: &other)
    return other
  }

  public fun compare_and_exchange(expected: UInt64, desired: UInt64, ordering: AtomicUpdateOrdering) inout -> Bool {
    if value == expected {
      &value = desired.copy()
      return true
    }
    return false
  }

  public fun compare_and_exchange(expected: UInt64, desired: UInt64, success_ordering: AtomicUpdateOrdering, failure_ordering: AtomicLoadOrdering) inout -> Bool {
    return compare_and_exchange(expected: expected, desired: desired, ordering: success_ordering)
  }

  public fun weak_compare_and_exchange(expected: UInt64, desired: UInt64, ordering: AtomicUpdateOrdering) inout -> Bool {
    return compare_and_exchange(expected: expected, desired: desired, ordering: ordering)
  }

  public fun weak_compare_and_exchange(expected: UInt64, desired: UInt64, success_ordering: AtomicUpdateOrdering, failure_ordering: AtomicLoadOrdering) inout -> Bool {
    return compare_and_exchange(expected: expected, desired: desired, ordering: success_ordering)
  }

  public fun fetch_add(_ value: UInt64, ordering: AtomicUpdateOrdering) inout -> UInt64 {
    return exchange(desired: self.value + value, ordering: ordering)
  }
  public fun fetch_sub(_ value: UInt64, ordering: AtomicUpdateOrdering) inout -> UInt64 {
    return exchange(desired: self.value - value, ordering: ordering)
  }
  public fun fetch_and(_ value: UInt64, ordering: AtomicUpdateOrdering) inout -> UInt64 {
    return exchange(desired: self.value & value, ordering: ordering)
  }
  public fun fetch_nand(_ value: UInt64, ordering: AtomicUpdateOrdering) inout -> UInt64 {
    return exchange(desired: ~(self.value & value), ordering: ordering)
  }
  public fun fetch_or(_ value: UInt64, ordering: AtomicUpdateOrdering) inout -> UInt64 {
    return exchange(desired: self.value | value, ordering: ordering)
  }
  public fun fetch_xor(_ value: UInt64, ordering: AtomicUpdateOrdering) inout -> UInt64 {
    return exchange(desired: self.value ^ value, ordering: ordering)
  }
  public fun fetch_max(_ value: UInt64, ordering: AtomicUpdateOrdering) inout -> UInt64 {
    if self.value < value {
      return exchange(desired: value, ordering: ordering)
    }
    return self.value.copy()
  }
  public fun fetch_min(_ value: UInt64, ordering: AtomicUpdateOrdering) inout -> UInt64 {
    if value < self.value {
      return exchange(desired: value, ordering: ordering)
    }
    return self.value.copy()
  }

}


///////////////////////////////////////////////////////////////////////////////
// MARK: pointer type

type MemoryAddressAtomicRepresentation {
  let value: MemoryAddress

  public typealias Value = MemoryAddress

  public fun load(ordering: AtomicLoadOrdering) -> MemoryAddress {
    return value.copy()
  }

  public fun store(_ value: MemoryAddress, ordering: AtomicStoreOrdering) inout {
    &self.value = value.copy()
  }

  public fun exchange(desired: MemoryAddress, ordering: AtomicUpdateOrdering) inout -> MemoryAddress {
    inout other = desired.copy()
    &value.exchange(with: &other)
    return other
  }

  public fun compare_and_exchange(expected: MemoryAddress, desired: MemoryAddress, ordering: AtomicUpdateOrdering) inout -> Bool {
    if value == expected {
      &value = desired.copy()
      return true
    }
    return false
  }

  public fun compare_and_exchange(expected: MemoryAddress, desired: MemoryAddress, success_ordering: AtomicUpdateOrdering, failure_ordering: AtomicLoadOrdering) inout -> Bool {
    return compare_and_exchange(expected: expected, desired: desired, ordering: success_ordering)
  }

  public fun weak_compare_and_exchange(expected: MemoryAddress, desired: MemoryAddress, ordering: AtomicUpdateOrdering) inout -> Bool {
    return compare_and_exchange(expected: expected, desired: desired, ordering: ordering)
  }

  public fun weak_compare_and_exchange(expected: MemoryAddress, desired: MemoryAddress, success_ordering: AtomicUpdateOrdering, failure_ordering: AtomicLoadOrdering) inout -> Bool {
    return compare_and_exchange(expected: expected, desired: desired, ordering: success_ordering)
  }

}


///////////////////////////////////////////////////////////////////////////////
// MARK: Conformances

public conformance BoolAtomicRepresentation: PlatformAtomic {}

public conformance IntAtomicRepresentation: PlatformAtomic {}
public conformance Int8AtomicRepresentation: PlatformAtomic {}
public conformance Int32AtomicRepresentation: PlatformAtomic {}
public conformance Int64AtomicRepresentation: PlatformAtomic {}
public conformance UIntAtomicRepresentation: PlatformAtomic {}
public conformance UInt8AtomicRepresentation: PlatformAtomic {}
public conformance UInt32AtomicRepresentation: PlatformAtomic {}
public conformance UInt64AtomicRepresentation: PlatformAtomic {}

public conformance IntAtomicRepresentation: IntegerPlatformAtomic {}
public conformance Int8AtomicRepresentation: IntegerPlatformAtomic {}
public conformance Int32AtomicRepresentation: IntegerPlatformAtomic {}
public conformance Int64AtomicRepresentation: IntegerPlatformAtomic {}
public conformance UIntAtomicRepresentation: IntegerPlatformAtomic {}
public conformance UInt8AtomicRepresentation: IntegerPlatformAtomic {}
public conformance UInt32AtomicRepresentation: IntegerPlatformAtomic {}
public conformance UInt64AtomicRepresentation: IntegerPlatformAtomic {}
